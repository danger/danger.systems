---
title: Danger - Stop Saying "You Forgot To..." in Code Review
---

ruby:
  require 'json'

code.byline a project from <a href="https://orta.io">orta therox</a> and <a href="https://krausefx">felix krause</a>.

header.title
  p Danger
  = image_tag "title.png", class: "retina", alt: "Danger title image"

section
  h2
    span What is Danger?
  article
    p Danger runs after your CI, and gives teams the chance to automate common code review chores.
    p This provides another logical step in your process, through this Danger can help lint your rote tasks in daily code review.
    p You can use Danger to codify your teams norms. Leaving humans to think about harder problems.
  .clearfix

section.examples
  h2
   span For Example

  ul
    li.changelog data-repos="artsy/eigen, cocoapods/cocoapods, realm/jazzy" data-prs="CocoaPods/CocoaPods/pull/5413"
      a Enforce Changelogs
    li.focus  data-repos="artsy/eigen, moya/moya" data-prs="Moya/Moya/pull/521"
      a Dont Focus Tests
    li.prose data-repos="" data-prs="ashfurrow/blog/pull/218"
      a Lint Blog Post Prose
    li.merges data-repos="" data-prs="CocoaPods/CocoaPods/pull/5413"
      a Ensure no Merges
    li.existing  data-repos="" data-prs="CocoaPods/CocoaPods/pull/5413"
      a Check for Existing Issues
    li.alert  data-repos="artsy/eigen, cocoapods/cocoapods" data-prs="CocoaPods/CocoaPods/pull/5413"
      a Alert File Owners
    li.build_times  data-repos="artsy/eigen, cocoapods/cocoapods" data-prs="CocoaPods/CocoaPods/pull/5413"
      a Check Build Times - ok

  div
    code
      markdown:
        <figure class="changelog">
          # Add a CHANGELOG entry for app changes
          if !modified_files.include?("CHANGELOG.md") && has_app_changes
            fail("Please include a CHANGELOG entry. \nYou can find it at [CHANGELOG.md](https://github.com/realm/jazzy/blob/master/CHANGELOG.md).")
            message "Note, we hard-wrap at 80 chars and use 2 spaces after the last line."
          end
        </figure>

        <figure class="focus" style="display:none;">
          # Don't let testing shortcuts get into master by accident
          fail("fit left in tests") if `grep -r "fit Demo/Tests/ `.length > 1
        </figure>

        <figure class="prose" style="display:none;">
          def something()
            puts “OK”
          end
        </figure>
        <figure class="merges" style="display:none;">
          def something()
            puts “OK”
          end
        </figure>
        <figure class="existing" style="display:none;">
          def something()
            puts “OK”
          end
        </figure>
        <figure class="alert" style="display:none;">
          def something()
            puts “OK”
          end
        </figure>
        <figure class="build_times" style="display:none;">
          def something()
            puts “OK”
          end
        </figure>

    ref == "# See artsy/eigen"

  .clearfix

section
  h2
   span What magic is this?

  article
    h3 How
    markdown:
      Danger is ruby gem that runs a `Dangerfile`, you set up a `Dangerfile` per-project. The `Dangerfile` contains a collection of home-grown rules specific to your project.

      Danger should be installed via a Gemfile. Add `gem "danger"` to your Gemfile, then run `bundle`.

      You can integrate Danger into your own project on any available CI service. She will run through the process with you if you run  `danger init` after installation.

  article
    h3 Supports
    p <strong>Can be run on</strong>: Circle, Travis, Jenkins, Buildkite, Xcode Bots, Drone.
    p <strong>Can chat back on</strong>: GitHub
    p <strong>Can handle diffs from</strong>: Git

    h3 Danger DSL
    markdown:
      ```
      message("message") - Declares a CI message
      warn("message") - Declares a CI warning
      fail("message") - Declares a CI blocking error
      markdown("message") - Outputs markdown
      ```
  .clearfix

  section
    h2
      span Plugins
    article
      p Danger was built to be a small core, which allows others to extend her DSL via gems as plugins. You can create a new one with `danger plugin create`.
    .clearfix

    - for plugin in JSON.parse(File.read("json_data/plugins.json"))
      article
        /  TODO: Name + version in metadata
        / h3 == plugin["gem"].gsub("danger-", "") + " <span>#{plugin["gem"]["version"]}</span>"
        h3 == plugin["name"]
        == markdown_h(plugin["body_md"])

        h3 Reference
        h4 Attributes
        - for attribute in plugin["attributes"]
          .fake_code
             == markdown_h(attribute.values.first["write"]["body_md"])
          code == attribute.keys.first

        h4 Methods
        - for method in plugin["methods"]
          .fake_code
             == markdown_h(method["body_md"])
          code == method["name"]

      article
        h3 Examples
        - for example in plugin["example_code"]
          h4 == example["title"]
          code
            blockquote == example["text"].lines.join("<br>")

        / TODO: Gem name
        / h3 How to Install
        / markdown:
        /   Include `gem "#{plugin["gem"]["name"]}"` in your project’s Gemfile. Then run `bundle`.

        /   Then inside your Dangerfile, you can access the plugin's API via `#{plugin["instance_name"]}`.

        h3 Tags
        code == plugin["tags"].join(" ")

        - if plugin["see"].empty? == false
          h3 See in Action
          ul
            - for link in plugin["see"]
              li
                a href="https://github.com/#{link}" == link
      .clearfix

  section
    h2
      span Meta
    article
      p Danger was built to be a small core, which allows others to extend her DSL via gems as plugins. You can create a new one with `danger plugin create`.
    .clearfix

javascript:
    $(function() {
      $("section.examples ul li").mouseover(function(event) {
        event.preventDefault()

        // Set the corresponding code
        var klass = $(this).attr("class").replace(" highlighted", "")
        console.log(klass)
        // Set selection
        $("section.examples ul li").removeClass("highlighted")
        $(this).addClass("highlighted")

        $("section.examples code figure").css("display", "none")
        $("section.examples code figure." + klass).css("display", "block")

         // Figure out the reference text
       var urls = $(this).data("repos").split(", ")
       var prs = $(this).data("prs").split(", ")
       var toGithubLink = function(ref) {
           return "<a href='https://github.com/" + ref + "''>" + ref + "</a>"
        }
        var showArray = function(array) {
          if (array.length > 1) { return true }
          if (array.length == 0) { return false }
          return array[0].length > 0
        }

        // Set the reference text under the code for people to inspect
        var text = ""
        if (showArray(urls)) {
          text += "@see_repo " + urls.map(toGithubLink).join(", ")
        }
        if (showArray(urls) && showArray(prs)) {
          text += "<br/>"
        }
        if (showArray(prs)) {
          text += "@see_pr "+ prs.map(toGithubLink).join(", ")
        }
        $("section.examples ref").html(text)
      })

      // Set the selection to be the first
      $("section.examples ul li:first-child").trigger('mouseenter')
    });
